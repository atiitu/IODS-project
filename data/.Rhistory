source("http://bioconductor.org/biocLite.R")
biocLite("EnsDb.Hsapiens.v75")
install.packages("manipulate")
R.Version()
learning_data <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header=T, sep="\t", as.is=T)
#check dimensions
dim(learning_data)
#check structure
str(learning_data)
#
library(dplyr)
learning_data$attitude <- learning_data$Attitude / 10
#Select right columns
deep_columns <- select(learning_data, one_of(deep_questions))
#Call library you need
library(dplyr)
install.packages("dplyr")
#Call library you need
library(dplyr)
# 2. STEP in excersize ###
# read table from internet to R
learning_data <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header=T, sep="\t", as.is=T)
#check dimensions
dim(learning_data)
#Data includes 183 rows and 60 columns
#check structure
str(learning_data)
#str shows what are the variables, mostly integers, gender is in characters
#3. STEP in excersize ###
#scale Attitude variable (because it is a sum of 10 questions)
learning_data$attitude <- learning_data$Attitude / 10
# Next steps are for combining right questions to form columns deep, stra and surf
#select for deep
deep_questions <- c("D03", "D11", "D19", "D27", "D07",
"D14", "D22", "D30","D06",  "D15", "D23", "D31")
#select for stra
strategic_questions <- c("ST01","ST09","ST17","ST25",
"ST04","ST12","ST20","ST28")
#select for surf
surface_questions <- c("SU02","SU10","SU18","SU26",
"SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
install.packages("dplyr")
#Call library you need
library(dplyr)
deep_columns <- select(learning_data, one_of(deep_questions))
stra_columns <- select(learning_data, one_of(stra_questions))
surf_columns <- select(learning_data, one_of(surf_questions))
deep_questions <- c("D03", "D11", "D19", "D27", "D07",
"D14", "D22", "D30","D06",  "D15", "D23", "D31")
#select for stra
strategic_questions <- c("ST01","ST09","ST17","ST25",
"ST04","ST12","ST20","ST28")
#select for surf
surface_questions <- c("SU02","SU10","SU18","SU26",
"SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
deep_columns <- select(learning_data, one_of(deep_questions))
stra_columns <- select(learning_data, one_of(stra_questions))
surf_columns <- select(learning_data, one_of(surf_questions))
#Select right columns
deep_columns <- select(learning_data, one_of(deep_questions))
stra_columns <- select(learning_data, one_of(strategic_questions))
surf_columns <- select(learning_data, one_of(surface_questions))
#check dimension of some
dim(deep_columns)
learning_data$deep <- rowMeans(deep_columns)
learning_data$stra <- rowMeans(stra_columns)
learning_data$surf <- rowMeans(surf_columns)
#look how these new columns are
learning_data$deep
learning_data$stra
learning_data$surf
learning_datas <- filter(learning_data, Points > 0)
learning_data <- filter(learning_data, Points > 0)
#Name the wanted columns
colnames(learning_data)
#scale Attitude variable (because it is a sum of 10 questions)
learning_data$Attitude
#change column names:
# change the name of the second column
colnames(learning_data$Age) <- "age"
learn_variables <- c("gender", "Age", "attitude", "deep", "stra", "surf","Points")
ldata <- select(learning_data, one_of(learn_variables))
#Check the structure
str(ldata)
colnames(ldata)
#change some column names:
# change the name of the second column
colnames(ldata)[2] <- "age"
# change the name of "Points" to "points"
colnames(ldata)[7] <- "points"
#check the colnames again
colnames(ldata)
str(ldata)
dim(ldata)
setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
# read in two .csv tables, and check how to do it..
help(read.table)
por <- read.table("student-por.csv", sep = ";", header = TRUE)
mat <- read.table("student-mat.csv", sep = ";", header = TRUE)
str(por)
# check dimensions and structurese
# por
dim(por)
# mat is
dim(mat)
# common columns to use as identifiers for joining por and mat
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
mat_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# join the two datasets by the selected identifiers
# inner_join to keep only students in both datasets.
library(dplyr)
mat_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
# see the new column names
colnames(mat_por)
# look the new combined dataset
dim(mat_por)
glimpse(mat_por)
colnames(mat_por)
alc <- select(math_por, one_of(join_by))
alc <- select(mat_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# columns that were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
for(column_name in notjoined_columns) {
# select two columns from 'mat_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
alc$alc_use <- (alc$Dalc + alc$Walc)/2
summary(alc_use)
summary(alc$alc_use)
alc <- mutate(alc, high_use = alc_use > 2)
summary(alc$high_use)
str(alc)
#alc table to save
write.table(alc, file="student_alc.txt", sep="\t", dec=".")
test_table <- read.table(file = "student_alc.txt", sep="\t")
str(test_table) #looks good!
head(test_table)
help(write.table)
#save alc table
write.table(alc, file="student_alc.txt", sep="\t", dec=".", row.names = FALSE)
#save alc table
write.table(alc, file="student_alc.txt", sep="\t", dec=".", row.names = FALSE)
test_table <- read.table(file = "student_alc.txt", sep="\t")
str(test_table) #looks good!
#save alc table
write.table(alc, file="student_alc.txt", sep="\t", dec=".")
test_table <- read.table(file = "student_alc.txt", sep="\t")
str(test_table) #looks good!
head(test_table)
alc <- read.table(student_alc.txt, sep=\t)
knitr::opts_chunk$set(echo = TRUE)
setwd()setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
alc <- read.table("student_alc.txt, sep="\t"")
alc <- read.table(file = "student_alc.txt, sep="\t")
alc <- read.table(file = "~/Tyojuttuja/opinnot/GitHub/IODS-project/data/student_alc.txt, sep="\t")
setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
alc <- read.table(file = "~/Tyojuttuja/opinnot/GitHub/IODS-project/data/student_alc.txt, sep="\t")
setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
alc <- read.table(file = "~/Tyojuttuja/opinnot/GitHub/IODS-project/data/student_alc.txt, sep="\t")
setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
alc <- read.table(file ="~/Tyojuttuja/opinnot/GitHub/IODS-project/data/student_alc.txt)
setwd("~/Tyojuttuja/opinnot/GitHub/IODS-project/data")
alc <- read.table(file ="~/Tyojuttuja/opinnot/GitHub/IODS-project/data/student_alc.txt", sep= "\t")
colnames(alc)
library(dplyr); library(ggplot2)
table(high_use = alc$high_use, going_out = alc$goout)
table(high_use = alc$high_use, going_out = alc$goout) %>% prop.table()
table(high_use = alc$high_use, going_out = alc$goout) %>% prop.table(,2)
prop.table(table, 2)
prop.table(mytable, 2)
mytable <- table(high_use = alc$high_use, going_out = alc$goout)
prop.table(mytable, 2)
mytable <- table(high_use = alc$high_use, mothers_education = alc$Medu)
prop.table(mytable, 2)
mytable <- table(high_use = alc$high_use, fathers_education = alc$Fedu)
prop.table(mytable, 2)
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("final grade (points)" + xlab("high user of alcohol"))
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("final grade (points)") + xlab("high user of alcohol")
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("final grade (points)") + xlab("high-user of alcohol")
mytable <- table(high_use = alc$high_use, mothers_education = alc$Medu)
mytable
prop.table(mytable, 2)
mytable <- table(high_use = alc$high_use, fathers_education = alc$Fedu)
mytable
prop.table(mytable, 2)
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("final grade (points)") + xlab("high-user of alcohol")
library(dplyr); library(ggplot2)
mytable <- table(high_use = alc$high_use, going_out = alc$goout)
mytable
prop.table(mytable, 2)
model <- glm(high_use ~ goout, data = alc, family = "binomial")
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out a summary of the model
summary(model)
#logistic regression model
model <- glm(high_use ~ goout, data = alc, family = "binomial")
# print out a summary of the model
# summary(model)
# print out the coefficients of the model
coed <-coef(model)
# print out a summary of the model
# summary(model)
# print out the coefficients of the model
coef <-coef(model)
# compute odds ratios (OR)
# malli ei siis anna suoraan odds-ratiota...
OR <- coef %>% exp
OR
str(alc$Medu)
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
#logistic regression model
model <- glm(high_use ~ goout, data = alc, family = "binomial")
# print out a summary of the model
summary(model)
# print out the coefficients of the model
coef <-coef(model)
# compute odds ratios (OR)
OR <- coef %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
str(alc$Medu)
str(alc$Fedu)
str(alc)
#logistic regression model
model <- glm(high_use ~ Medu + Fedu, data = alc, family = "binomial")
# print out a summary of the model
summary(model)
# print out the coefficients of the model
coef <-coef(model)
# compute odds ratios (OR)
OR <- coef %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
#print out the odds ratios with their confidence intervals
cbind(OR, CI)
#print out the odds ratios with their confidence intervals
cbind(OR, CI)
#logistic regression model
model <- glm(high_use ~ G3, data = alc, family = "binomial")
# print out a summary of the model
summary(model)
# print out the coefficients of the model
coef <-coef(model)
# compute odds ratios (OR)
OR <- coef %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
#print out the odds ratios with their confidence intervals
cbind(OR, CI)
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G1))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("final grade (points)") + xlab("high-user of alcohol")
#logistic regression model
model <- glm(high_use ~ G1, data = alc, family = "binomial")
# print out a summary of the model
summary(model)
# print out the coefficients of the model
coef <-coef(model)
# compute odds ratios (OR)
OR <- coef %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
#print out the odds ratios with their confidence intervals
cbind(OR, CI)
# print out the coefficients of the model
# compute odds ratios (OR)
OR <- coef %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
library(dplyr); library(ggplot2)
mytable <- table(high_use = alc$high_use, going_out = alc$goout)
mytable
mytable <- table(high_use = alc$high_use, going_out = alc$goout)
mytable <- table(high_use = alc$high_use, going_out = alc$goout)
#logistic regression model
model <- glm(high_use ~ goout, data = alc, family = "binomial")
# print out a summary of the model
summary(model)
# print out the coefficients of the model
coef <-coef(model)
# compute odds ratios (OR)
OR <- coef %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
